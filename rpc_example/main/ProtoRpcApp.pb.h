/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_PROTORPCAPP_PB_H_INCLUDED
#define PB_PROTORPCAPP_PB_H_INCLUDED
#include <pb.h>
#include "ProtoRpc.pb.h"
#include "TestRpc.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _RpcFrame {
    bool has_header;
    ProtoRpcHeader header;
    pb_size_t which_callset;
    union {
        test_TestCallset test_callset;
    } callset;
} RpcFrame;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define RpcFrame_init_default                    {false, ProtoRpcHeader_init_default, 0, {test_TestCallset_init_default}}
#define RpcFrame_init_zero                       {false, ProtoRpcHeader_init_zero, 0, {test_TestCallset_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define RpcFrame_header_tag                      1
#define RpcFrame_test_callset_tag                2

/* Struct field encoding specification for nanopb */
#define RpcFrame_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  header,            1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (callset,test_callset,callset.test_callset),   2)
#define RpcFrame_CALLBACK NULL
#define RpcFrame_DEFAULT NULL
#define RpcFrame_header_MSGTYPE ProtoRpcHeader
#define RpcFrame_callset_test_callset_MSGTYPE test_TestCallset

extern const pb_msgdesc_t RpcFrame_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define RpcFrame_fields &RpcFrame_msg

/* Maximum encoded size of messages (where known) */
#define RpcFrame_size                            140

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
